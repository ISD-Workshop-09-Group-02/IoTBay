{"version":3,"sources":["../src/index.ts","../src/auth/strategies/local.strategy.ts","../src/services/prisma.ts"],"names":["argon2"],"mappings":";AAEA,OAAO,0BAA0B;AACjC,OAAO,aAAa;;;ACHpB,SAAS,YAAY,qBAAqB;;;ACA1C,SAAS,oBAAoB;AAE7B,IAAO,iBAAQ,IAAI,aAAa;;;ADAhC,OAAO,YAAY;AACnB,IAAO,yBAAQ,IAAI,cAAc,OAAO,UAAU,UAAU,OAAO;AAC/D,UAAQ,IAAI,EAAC,UAAU,SAAQ,CAAC;AAClC,QAAM,OAAO,MAAM,eAAO,KAAK,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;AACjE,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,EACT;AACA,QAAM,gBAAgB,MAAM,OAAO,OAAO,KAAK,UAAU,QAAQ;AACjE,MAAI,CAAC,eAAe;AAClB,WAAO;AAAA,EACT;AAEA,QAAM,EAAE,UAAU,WAAW,GAAG,KAAI,IAAI;AACxC,KAAG,QAAW,IAAI;AACpB,CAAC;;;ADTD,OAAOA,aAAY;AACnB,OAAO,QAAQ;AAEf,OAAO,qBAAqB;AAE5B,IAAM,SAAS,QAAQ;AAKvB,OAAO,SAAS,sBAAsB;AAAA,EACpC,YAAY;AAAA,EACZ,KAAK,GAAG,aAAa,IAAI,IAAI,iBAAiB,YAAY,GAAG,CAAC;AAAA,EAC9D,QAAQ;AAAA,IACN,MAAM;AAAA,EACR;AACF,CAAC;AAGD,OAAO,IAAI,KAAK,CAAC,KAAK,QAAQ;AAC1B,UAAQ,IAAI,IAAI,OAAO;AAEvB,MAAI,KAAK,OAAO;AACpB,CAAC;AAID,OAAO,SAAS,gBAAgB,WAAW,CAAC;AAC5C,OAAO,SAAS,gBAAgB,cAAc,CAAC;AAG/C,gBAAgB,IAAI,SAAS,sBAAa;AAE1C,gBAAgB;AAAA,EACd,OAAO,MAA8B,YAAY,KAAK;AACxD;AAGA,gBAAgB,yBAAyB,OAAO,UAAkB,YAAY;AAC5E,QAAM,EAAE,UAAU,GAAG,KAAK,IAAI,MAAM,eAAO,KAAK,kBAAkB;AAAA,IAChE,OAAO,EAAE,SAAS;AAAA,EACpB,CAAC;AACD,SAAO;AACT,CAAC;AAED,OAAO;AAAA,EACL;AAAA,EACA;AAAA,IACE,eAAe,gBAAgB,aAAa,SAAS;AAAA,MACnD,UAAU;AAAA,MACV,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AAAA,EACA,CAAC,KAAK,QAAQ;AACZ,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AACF;AAEA,OAAO,KAAK,aAAa,OAAO,KAAK,QAAQ;AAC3C,QAAM,EAAE,UAAU,SAAS,IAAI,IAAI;AAKnC,QAAM,eAAe,MAAMA,QAAO,KAAK,QAAQ;AAE/C,QAAM,OAAO,MAAM,eAAO,KAAK,OAAO;AAAA,IACpC,MAAM;AAAA,MACJ;AAAA,MACA,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF,CAAC;AAED,SAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,IAC1B,SAAS;AAAA,EACX,CAAC;AACH,CAAC;AAED,IAAM,QAAQ,YAAY;AACxB,MAAI;AACF,YAAQ,IAAI,gBAAgB;AAC5B,UAAM,OAAO,OAAO,EAAE,MAAM,IAAK,CAAC;AAAA,EACpC,SAAS,KAAP;AACA,WAAO,IAAI,MAAM,GAAG;AACpB,YAAQ,KAAK,CAAC;AAAA,EAChB;AACF;AACA,MAAM","sourcesContent":["import { Authenticator } from \"@fastify/passport\";\nimport fastifyCookie from \"@fastify/cookie\";\nimport fastifySecureSession from \"@fastify/secure-session\";\nimport fastify from \"fastify\";\nimport localStrategy from \"./auth/strategies/local.strategy\";\nimport { User } from \"@prisma/client\";\nimport prisma from \"./services/prisma\";\nimport argon2 from \"argon2\";\nimport fs from 'fs'\nimport path from 'path'\nimport fastifyPassport from '@fastify/passport'\n\nconst server = fastify();\n\n// setup an Authenticator instance which uses @fastify/session\n// const fastifyPassport = new Authenticator();\n\nserver.register(fastifySecureSession, {\n  cookieName: \"sessionid\",\n  key: fs.readFileSync(new URL(\"../secret_key\", import.meta.url)),\n  cookie: {\n    path: \"/\"\n  }\n});\n\n\nserver.get('/', (req, res) => {\n    console.log(req.session)\n\n    res.send(\"Hello\")\n})\n// server.register(fastifyCookie);\n\n// initialize @fastify/passport and connect it to the secure-session storage. Note: both of these plugins are mandatory.\nserver.register(fastifyPassport.initialize());\nserver.register(fastifyPassport.secureSession());\n\n// register an example strategy for fastifyPassport to authenticate users using\nfastifyPassport.use(\"local\", localStrategy); // you'd probably use some passport strategy f\n\nfastifyPassport.registerUserSerializer(\n  async (user: Omit<User, \"password\">, request) => user.username\n);\n\n// ... and then a deserializer that will fetch that user from the database when a request with an id in the session arrives\nfastifyPassport.registerUserDeserializer(async (username: string, request) => {\n  const { password, ...user } = await prisma.user.findUniqueOrThrow({\n    where: { username },\n  });\n  return user;\n});\n\nserver.post(\n  \"/login\",\n  {\n    preValidation: fastifyPassport.authenticate(\"local\", {\n      authInfo: false,\n      session: true,\n    }),\n  },\n  (req, res) => {\n    return res.status(200).send({\n      message: \"Logged in\",\n    });\n  }\n);\n\nserver.post(\"/register\", async (req, res) => {\n  const { username, password } = req.body as {\n    username: string;\n    password: string;\n  };\n\n  const passwordHash = await argon2.hash(password);\n\n  const user = await prisma.user.create({\n    data: {\n      username,\n      password: passwordHash,\n    },\n    select: {\n      username: true,\n    },\n  });\n\n  return res.status(201).send({\n    message: \"Successfully created user\",\n  });\n});\n\nconst start = async () => {\n  try {\n    console.log(\"Server Started\")\n    await server.listen({ port: 3000 });\n  } catch (err) {\n    server.log.error(err);\n    process.exit(1);\n  }\n};\nstart();\n","import { Strategy as LocalStrategy } from \"passport-local\";\nimport prisma from \"../../services/prisma\";\nimport argon2 from \"argon2\";\nexport default new LocalStrategy(async (username, password, cb) => {\n    console.log({username, password})\n  const user = await prisma.user.findUnique({ where: { username } });\n  if (!user) {\n    return false;\n  }\n  const passwordValid = await argon2.verify(user.password, password);\n  if (!passwordValid) {\n    return false;\n  }\n\n  const { password: _password, ...rest} = user\n  cb(undefined, rest)\n});\n","import { PrismaClient } from \"@prisma/client\";\n\nexport default new PrismaClient()"]}